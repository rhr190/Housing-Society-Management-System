/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package hsms_project;

import static hsms_project.SocietyFees.isNumeric;
import java.sql.*;
import java.time.*;
import java.util.ArrayList;
import java.util.Date;
import javax.swing.JFrame;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;
import javax.swing.JOptionPane;
import javax.swing.table.*;

/**
 *
 * @author Dorktech
 */
public class complaints_Rafsan extends javax.swing.JFrame {

    /**
     * Creates new form complaints
     */
    public complaints_Rafsan() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    
    void showAllComp()
    {
        ArrayList<CompRecord> allRecords = new ArrayList<>();
        CompRecord records;
        
        try{
            Connection conn = DriverManager.getConnection("jdbc:sqlserver://localhost:1433;databaseName=HSMS_Project;selectMethod=cursor", "sa", "123456"); //edit if necessary
            Statement statement = conn.createStatement();
            ResultSet rs = statement.executeQuery("SELECT * from COMPLAINTS_SMI"); //edit if necessary
            
            if(rs.next() == false)
            {
                System.out.println("No entry found");
            }
            
            else
            {
                do{
                    records = new CompRecord(rs.getInt("Indx"),rs.getInt("SMI"),rs.getString("Sub"),rs.getString("Descrip"),rs.getString("Comments"),rs.getDate("Date")); //edit column name if necessary
                    allRecords.add(records);
                    
                }while(rs.next());
            }
            
            
            
            
        }catch (Exception e)
        {
            e.printStackTrace();
        }
        DefaultTableModel model = (DefaultTableModel)AllRecords.getModel();
            model.setRowCount(0);
            Object[] row = new Object[6];
            
            for(int i=0; i<allRecords.size(); i++)
            {
                row[0] = allRecords.get(i).getIndex();
                row[1] = allRecords.get(i).getComp_smi();
                row[2] = allRecords.get(i).getComp_title();
                row[3] = allRecords.get(i).getComp_descrip();
                row[4] = allRecords.get(i).getComp_status();
                row[5] = allRecords.get(i).getComp_date();
                model.addRow(row);
            }
        
    }
    
    //for inserting
    int ip_smi;
    String ip_title, ip_descrip;
    LocalDate ip_date;
    //for inserting
    
    void insertRecord()
    {
        int num;                                    //check variable
        ip_smi = Integer.valueOf(InSmi.getText());  //input smi
        if(check_SMI(InSmi.getText())==false){
            JOptionPane.showMessageDialog(this, "Invalid SMI!");
            return;
        }
        ip_title = InTitle.getText();               //input title
        ip_descrip = InDescrp.getText();            //input description
        
        java.util.Date date = InDate.getDate();
        ip_date = date.toInstant().atZone(ZoneId.systemDefault()).toLocalDate();
        java.sql.Date sqlCompDate = java.sql.Date.valueOf(ip_date);                 //input date
        
        try{
            Connection conn = DriverManager.getConnection("jdbc:sqlserver://localhost:1433;databaseName=HSMS_Project;selectMethod=cursor", "sa", "123456"); //edit if necessary
            Statement statement = conn.createStatement();
            String query = "INSERT INTO COMPLAINTS_SMI(SMI, Sub, Descrip, Date, Comments)" +
                            "VALUES("+ip_smi+", '"+ip_title+"','"+ip_descrip+"','"+ip_date+"', 'Unchecked')";
            statement.executeUpdate(query);
            JOptionPane.showMessageDialog(this, "Complaint has been recorded");
            InSmi.setText("");
            InTitle.setText("");
            InDescrp.setText("");
            InDate.setDate(null);
        }catch(Exception e)
        {
            e.printStackTrace();
        }
        
    }
    
    
    
    //for searching
    int searchSMI;
    LocalDate searchDate;
    String searchStatus;
    //for searching
    
    void searchBySMI()
    {
        searchSMI = Integer.valueOf(SearchBySMI.getText());
        ArrayList<CompRecord> SearchRecord_SMI = new ArrayList<>();
        CompRecord records_bySMI;
        
        try
        {
            Connection conn = DriverManager.getConnection("jdbc:sqlserver://localhost:1433;databaseName=HSMS_Project;selectMethod=cursor", "sa", "123456"); //edit if necessary
            Statement statement = conn.createStatement();
            ResultSet rs = statement.executeQuery("SELECT * from COMPLAINTS_SMI where SMI = "+searchSMI+""); //edit if necessary
            
            if(rs.next() == false)
            {
                System.out.println("No entry found");
            }
            else
            {
                do
                {
                    records_bySMI = new CompRecord(rs.getInt("Indx"),rs.getInt("SMI"),rs.getString("Sub"),rs.getString("Descrip"),rs.getString("Comments"),rs.getDate("Date")); //edit column name if necessary
                    SearchRecord_SMI.add(records_bySMI);
                    
                }while(rs.next());
            }
            
            DefaultTableModel model = (DefaultTableModel)SearchRecordTable.getModel();
            model.setRowCount(0);
            
            Object[] row = new Object[6];
            
            for(int i=0; i<SearchRecord_SMI.size(); i++)
            {
                row[0] = SearchRecord_SMI.get(i).getIndex();
                row[1] = SearchRecord_SMI.get(i).getComp_smi();
                row[2] = SearchRecord_SMI.get(i).getComp_title();
                row[3] = SearchRecord_SMI.get(i).getComp_descrip();
                row[4] = SearchRecord_SMI.get(i).getComp_status();
                row[5] = SearchRecord_SMI.get(i).getComp_date();
                model.addRow(row);
            }
            
        }catch(Exception e)
        {
            e.printStackTrace();
        }
        
    }
    
    
    void searchByDate()
    {
        java.util.Date date = SearchByDate.getDate();
        searchDate = date.toInstant().atZone(ZoneId.systemDefault()).toLocalDate();
        java.sql.Date sqlCompDate = java.sql.Date.valueOf(searchDate);
    
        
        ArrayList<CompRecord> SearchRecord_Date = new ArrayList<>();
        CompRecord records_byDate;
        
        try
        {
            Connection conn = DriverManager.getConnection("jdbc:sqlserver://localhost:1433;databaseName=HSMS_Project;selectMethod=cursor", "sa", "123456"); //edit if necessary
            Statement statement = conn.createStatement();
            ResultSet rs = statement.executeQuery("SELECT * from COMPLAINTS_SMI where Date = '"+sqlCompDate+"'"); //edit if necessary
            
            if(rs.next() == false)
            {
                System.out.println("No entry found");
            }
            else
            {
                do
                {
                    records_byDate = new CompRecord(rs.getInt("Indx"),rs.getInt("SMI"),rs.getString("Sub"),rs.getString("Descrip"),rs.getString("Comments"),rs.getDate("Date")); //edit column name if necessary
                    SearchRecord_Date.add(records_byDate);
                    
                }while(rs.next());
            }
            
            DefaultTableModel model = (DefaultTableModel)SearchRecordTable.getModel();
            model.setRowCount(0);
            
            Object[] row = new Object[6];
            
            for(int i=0; i<SearchRecord_Date.size(); i++)
            {
                row[0] = SearchRecord_Date.get(i).getIndex();
                row[1] = SearchRecord_Date.get(i).getComp_smi();
                row[2] = SearchRecord_Date.get(i).getComp_title();
                row[3] = SearchRecord_Date.get(i).getComp_descrip();
                row[4] = SearchRecord_Date.get(i).getComp_status();
                row[5] = SearchRecord_Date.get(i).getComp_date();
                model.addRow(row);
            }
            
        }catch(Exception e)
        {
            e.printStackTrace();
        }
    }
    
    void searchByStatus()
    {
        searchStatus = (String)SearchByStatus.getSelectedItem();
        
         ArrayList<CompRecord> SearchRecord_Status = new ArrayList<>();
         CompRecord records_byStatus;
         
          
        try
        {
            Connection conn = DriverManager.getConnection("jdbc:sqlserver://localhost:1433;databaseName=HSMS_Project;selectMethod=cursor", "sa", "123456"); //edit if necessary
            Statement statement = conn.createStatement();
            ResultSet rs = statement.executeQuery("SELECT * from COMPLAINTS_SMI where Comments = '"+searchStatus+"'"); //edit if necessary
            
            if(rs.next() == false)
            {
                System.out.println("No entry found");
            }
            else
            {
                do
                {
                    records_byStatus = new CompRecord(rs.getInt("Indx"),rs.getInt("SMI"),rs.getString("Sub"),rs.getString("Descrip"),rs.getString("Comments"),rs.getDate("Date")); //edit column name if necessary
                    SearchRecord_Status.add(records_byStatus);
                    
                }while(rs.next());
            }
            
            DefaultTableModel model = (DefaultTableModel)SearchRecordTable.getModel();
            model.setRowCount(0);
            
            Object[] row = new Object[6];
            
            for(int i=0; i<SearchRecord_Status.size(); i++)
            {
                row[0] = SearchRecord_Status.get(i).getIndex();
                row[1] = SearchRecord_Status.get(i).getComp_smi();
                row[2] = SearchRecord_Status.get(i).getComp_title();
                row[3] = SearchRecord_Status.get(i).getComp_descrip();
                row[4] = SearchRecord_Status.get(i).getComp_status();
                row[5] = SearchRecord_Status.get(i).getComp_date();
                model.addRow(row);
            }
            
        }catch(Exception e)
        {
            e.printStackTrace();
        }
    }
    
    //for update
    int update_smi;
    LocalDate update_date;
    //for update
    
    void searchUpdateStatus()
    {
        //update_smi = Integer.valueOf(UpdateForSMI.getText());
        
        //java.util.Date date = UpdateForDate.getDate();
        //update_date = date.toInstant().atZone(ZoneId.systemDefault()).toLocalDate();
        //java.sql.Date sqlCompDate = java.sql.Date.valueOf(update_date);
        
        ArrayList<CompRecord> SearchRecord_Update = new ArrayList<>();
        CompRecord records_forUpdate;
        
        try
        {
            Connection conn = DriverManager.getConnection("jdbc:sqlserver://localhost:1433;databaseName=HSMS_Project;selectMethod=cursor", "sa", "123456"); //edit if necessary
            Statement statement = conn.createStatement();
            ResultSet rs = statement.executeQuery("SELECT * from COMPLAINTS_SMI where SMI = "+update_smi ); //edit if necessary
            
            if(rs.next() == false)
            {
                System.out.println("No entry found");
            }
            
            else
            {
                do{
                    
                    records_forUpdate = new CompRecord(rs.getInt("Indx"),rs.getInt("SMI"),rs.getString("Sub"),rs.getString("Descrip"),rs.getString("Comments"),rs.getDate("Date")); //edit column name if necessary
                    SearchRecord_Update.add(records_forUpdate);
                    
                }while(rs.next());
            }
            
            DefaultTableModel model = (DefaultTableModel)SearchRecordTable.getModel();
            model.setRowCount(0);
            
            Object[] row = new Object[6];
            
            for(int i=0; i<SearchRecord_Update.size(); i++)
            {
                row[0] = SearchRecord_Update.get(i).getIndex();
                row[1] = SearchRecord_Update.get(i).getComp_smi();
                row[2] = SearchRecord_Update.get(i).getComp_title();
                row[3] = SearchRecord_Update.get(i).getComp_descrip();
                row[4] = SearchRecord_Update.get(i).getComp_status();
                row[5] = SearchRecord_Update.get(i).getComp_date();
                model.addRow(row);
            }
            
            
            
        }catch(Exception e)
        {
            e.printStackTrace();
        }
        
    }
    
    void updateStatus()
    {
        int ind, count= 0;
        java.sql.Date date;
        String updateToStatus = (String)UpdatedStatus.getSelectedItem();
        String status = "Unchecked";
        
        ArrayList<CompRecord> after_Update = new ArrayList<>();
        CompRecord records_afterUpdate;
        
        
        if(SearchRecordTable.getSelectionModel().isSelectionEmpty())
        {
            JOptionPane.showMessageDialog(this,"No values selected");
            return;
        }
        
        TableModel model = SearchRecordTable.getModel();
        int[] selectedRows = SearchRecordTable.getSelectedRows();
        
        for(int i=0; i<selectedRows.length; i++)
        {
            ind = (int)SearchRecordTable.getValueAt(selectedRows[i], 0);                      // might catch exception or give error
            //date = (java.sql.Date)UpdateTable.getValueAt(selectedRows[i], 5);           // might catch exception or give error
            //status = UpdateTable.getValueAt(selectedRows[i], 5).toString();             // might catch exception or give error
            
            try{
                
                Connection conn = DriverManager.getConnection("jdbc:sqlserver://localhost:1433;databaseName=HSMS_Project;selectMethod=cursor", "sa", "123456"); //edit if necessary
                Statement statement = conn.createStatement();
                int num = statement.executeUpdate("Update COMPLAINTS_SMI SET Comments = '"+updateToStatus+"' WHERE Indx = "+ind);
                if(num == 1)
                {
                    count++;
                }
                
            }catch(Exception e)
            {
               e.printStackTrace();
            }
            
        }
        
        if(count >= 1)
        {
               JOptionPane.showMessageDialog(this,"Updated successfully");
        }
        else
        {
               JOptionPane.showMessageDialog(this,"Error occurred");
        }
        
        try
        {
            Connection conn = DriverManager.getConnection("jdbc:sqlserver://localhost:1433;databaseName=HSMS_Project;selectMethod=cursor", "sa", "123456"); //edit if necessary
            Statement statement = conn.createStatement();
            //bujhi nai//ResultSet rs = statement.executeQuery("SELECT * from COMPLAINTS_SMI where SMI = "+update_smi+" AND CompDate = "+update_date+""); //edit if necessary
            ResultSet rs = statement.executeQuery("SELECT * from COMPLAINTS_SMI "); //edit if necessary
            
            if(rs.next() == false)
            {
                System.out.println("No entry found");
            }
            
            else
            {
                do{
                    
                    records_afterUpdate = new CompRecord(rs.getInt("Indx"),rs.getInt("SMI"),rs.getString("Sub"),rs.getString("Descrip"),rs.getString("Comments"),rs.getDate("Date")); //edit column name if necessary
                    after_Update.add(records_afterUpdate);
                    
                }while(rs.next());
            }
            
            DefaultTableModel modelNew = (DefaultTableModel)SearchRecordTable.getModel();
            modelNew.setRowCount(0);
            
            Object[] row = new Object[6];
            
            for(int i=0; i<after_Update.size(); i++)
            {
                row[0] = after_Update.get(i).getIndex();
                row[1] = after_Update.get(i).getComp_smi();
                row[2] = after_Update.get(i).getComp_title();
                row[3] = after_Update.get(i).getComp_descrip();
                row[4] = after_Update.get(i).getComp_status();
                row[5] = after_Update.get(i).getComp_date();
                modelNew.addRow(row);
            }
            
        }catch(Exception e)
        {
            e.printStackTrace();
        }
        
    }
    
    public ArrayList<ComplaintClass> complaintList(){
        ArrayList<ComplaintClass> complaintList= new ArrayList<>();       
        
        try{
            Connection connection;
            connection = DriverManager.getConnection(
                    "jdbc:sqlserver://localhost:1433;databaseName=HSMS_Project;selectMethod=cursor", "sa", "123456");
            Statement statement = connection.createStatement();
            String order = (String) jComboBox1.getSelectedItem();
            String query;
            if(order == "Date desc."){
                query = "select * from COMPLAINTS_SMI ORDER BY Date desc";
            }else if(order == "Date asc."){
                query = "select * from COMPLAINTS_SMI ORDER BY Date asc";
            }else{
                query = "select * from COMPLAINTS_SMI";
            }
            
            ResultSet resultset = statement.executeQuery(query);
            ComplaintClass complaintClass;
            while(resultset.next()){
                complaintClass = new ComplaintClass(resultset.getInt("Indx"), resultset.getInt("SMI"), resultset.getString("Sub"),resultset.getString("Descrip"), resultset.getString("Comments"), resultset.getString("Date"));
                complaintList.add(complaintClass);
                
            }
        }catch(Exception e){
            e.printStackTrace();
        }
        return complaintList;
    }
    
    public void show_complaint_list(){ 
        ArrayList<ComplaintClass> complaint = complaintList(); 
        DefaultTableModel model = (DefaultTableModel)SearchRecordTable.getModel();
        model.setRowCount(0);
        Object[] row = new Object[6];
        for(int i=0; i<complaint.size(); i++){
            row[0] = complaint.get(i).getIndx();
            row[1] = complaint.get(i).getDate();
            row[2] = complaint.get(i).getSmi();
            row[3] = complaint.get(i).getSub();
            row[4] = complaint.get(i).getDescrip();
            row[5] = complaint.get(i).getComm();
            model.addRow(row);
            
        }
    }
    
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        ShowAllComp = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        AllRecords = new javax.swing.JTable();
        jButton9 = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        InSmi = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        InDescrp = new javax.swing.JTextArea();
        jLabel4 = new javax.swing.JLabel();
        InDate = new com.toedter.calendar.JDateChooser();
        Sub_Record = new javax.swing.JButton();
        jLabel11 = new javax.swing.JLabel();
        InTitle = new javax.swing.JTextField();
        jButton7 = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        SearchBySMI = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        SearchByDate = new com.toedter.calendar.JDateChooser();
        jLabel7 = new javax.swing.JLabel();
        SearchByStatus = new javax.swing.JComboBox<>();
        SearchForSMI = new javax.swing.JButton();
        SearchForDate = new javax.swing.JButton();
        SearchForStatus = new javax.swing.JButton();
        jScrollPane5 = new javax.swing.JScrollPane();
        SearchRecordTable = new javax.swing.JTable();
        jButton8 = new javax.swing.JButton();
        jLabel13 = new javax.swing.JLabel();
        jComboBox1 = new javax.swing.JComboBox<>();
        jButton11 = new javax.swing.JButton();
        jLabel10 = new javax.swing.JLabel();
        UpdatedStatus = new javax.swing.JComboBox<>();
        Update_Status_Button = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Society Complaints Panel");

        jTabbedPane1.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N

        ShowAllComp.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        ShowAllComp.setText("Show All Complaints");
        ShowAllComp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ShowAllCompActionPerformed(evt);
            }
        });

        AllRecords.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        AllRecords.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Index", "SMI", "Title", "Description", "Status", "Date"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(AllRecords);

        jButton9.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jButton9.setText("Main Menu");
        jButton9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton9ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGap(0, 682, Short.MAX_VALUE)
                        .addComponent(ShowAllComp)
                        .addGap(592, 592, 592)
                        .addComponent(jButton9)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(ShowAllComp))
                    .addComponent(jButton9))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 37, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 670, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        jTabbedPane1.addTab("All Complaints", jPanel1);

        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel2.setText("SMI");

        InSmi.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N

        jLabel3.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel3.setText("Description");

        InDescrp.setColumns(20);
        InDescrp.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        InDescrp.setRows(5);
        jScrollPane2.setViewportView(InDescrp);

        jLabel4.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel4.setText("Date of Complaint");

        InDate.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N

        Sub_Record.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        Sub_Record.setText("Submit");
        Sub_Record.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Sub_RecordActionPerformed(evt);
            }
        });

        jLabel11.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel11.setText("Subject/Topic");

        InTitle.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N

        jButton7.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jButton7.setText("Main Menu");
        jButton7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton7ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap(551, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel11, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel3, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel4, javax.swing.GroupLayout.Alignment.TRAILING))
                        .addGap(33, 33, 33)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(InSmi)
                            .addComponent(jScrollPane2)
                            .addComponent(InDate, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(InTitle, javax.swing.GroupLayout.PREFERRED_SIZE, 404, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(479, 479, 479))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addComponent(Sub_Record)
                        .addGap(736, 736, 736))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addComponent(jButton7)
                        .addContainerGap())))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(jButton7)
                .addGap(89, 89, 89)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(InSmi, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addGap(48, 48, 48)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(InTitle, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel11))
                .addGap(51, 51, 51)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3))
                .addGap(61, 61, 61)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(InDate, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(92, 92, 92)
                .addComponent(Sub_Record)
                .addContainerGap(157, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Insert Complaint", jPanel2);

        jLabel5.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel5.setText("Search by Status");

        SearchBySMI.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        SearchBySMI.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SearchBySMIActionPerformed(evt);
            }
        });

        jLabel6.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel6.setText("Search by SMI");

        SearchByDate.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N

        jLabel7.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel7.setText("Search by Date");

        SearchByStatus.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        SearchByStatus.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Unchecked", "Checked", "Solved", " " }));
        SearchByStatus.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SearchByStatusActionPerformed(evt);
            }
        });

        SearchForSMI.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        SearchForSMI.setIcon(new javax.swing.ImageIcon(getClass().getResource("/hsms_project/search_icon.png"))); // NOI18N
        SearchForSMI.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SearchForSMIActionPerformed(evt);
            }
        });

        SearchForDate.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        SearchForDate.setIcon(new javax.swing.ImageIcon(getClass().getResource("/hsms_project/search_icon.png"))); // NOI18N
        SearchForDate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SearchForDateActionPerformed(evt);
            }
        });

        SearchForStatus.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        SearchForStatus.setIcon(new javax.swing.ImageIcon(getClass().getResource("/hsms_project/search_icon.png"))); // NOI18N
        SearchForStatus.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SearchForStatusActionPerformed(evt);
            }
        });

        SearchRecordTable.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        SearchRecordTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Index", "SMI", "Title", "Description", "Status", "Date"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane5.setViewportView(SearchRecordTable);

        jButton8.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jButton8.setText("Main Menu");
        jButton8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton8ActionPerformed(evt);
            }
        });

        jLabel13.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel13.setText("Order by");

        jComboBox1.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Date asc.", "Date desc.", " " }));

        jButton11.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jButton11.setIcon(new javax.swing.ImageIcon("E:\\3.1\\Database Lab\\HSMS_Project\\test\\search_icon.png")); // NOI18N
        jButton11.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton11ActionPerformed(evt);
            }
        });

        jLabel10.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel10.setText("Updated Status");

        UpdatedStatus.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        UpdatedStatus.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Checked", "Solved", "" }));
        UpdatedStatus.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                UpdatedStatusActionPerformed(evt);
            }
        });

        Update_Status_Button.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        Update_Status_Button.setText("Update");
        Update_Status_Button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Update_Status_ButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane5, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addComponent(jLabel6)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(SearchBySMI, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(SearchForSMI, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(90, 90, 90)
                                .addComponent(jLabel7)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(SearchByDate, javax.swing.GroupLayout.PREFERRED_SIZE, 169, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(SearchForDate, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jLabel10))
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addGap(13, 13, 13)
                                .addComponent(UpdatedStatus, javax.swing.GroupLayout.PREFERRED_SIZE, 161, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(Update_Status_Button)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 74, Short.MAX_VALUE)
                                .addComponent(jLabel13)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jButton11, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(54, 54, 54)
                                .addComponent(jLabel5)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(SearchByStatus, javax.swing.GroupLayout.PREFERRED_SIZE, 139, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(SearchForStatus, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(73, 73, 73)
                                .addComponent(jButton8)))))
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(SearchForSMI)
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                            .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(SearchByStatus, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addComponent(SearchForStatus)
                                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                            .addComponent(jButton11, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                                            .addComponent(jComboBox1, javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jLabel13, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addComponent(SearchForDate, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                            .addComponent(SearchByDate, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(jLabel7, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                    .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(SearchBySMI, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGap(2, 2, 2))))
                    .addComponent(jButton8))
                .addGap(18, 18, 18)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(UpdatedStatus, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Update_Status_Button))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane5, javax.swing.GroupLayout.DEFAULT_SIZE, 647, Short.MAX_VALUE)
                .addContainerGap())
        );

        jTabbedPane1.addTab("Search Complaints", jPanel3);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1)
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void SearchBySMIActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SearchBySMIActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_SearchBySMIActionPerformed

    private void SearchByStatusActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SearchByStatusActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_SearchByStatusActionPerformed

    private void SearchForSMIActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SearchForSMIActionPerformed
        // TODO add your handling code here:
        searchBySMI();
    }//GEN-LAST:event_SearchForSMIActionPerformed

    private void SearchForDateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SearchForDateActionPerformed
        // TODO add your handling code here:
        searchByDate();
    }//GEN-LAST:event_SearchForDateActionPerformed

    private void SearchForStatusActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SearchForStatusActionPerformed
        // TODO add your handling code here:
        searchByStatus();
    }//GEN-LAST:event_SearchForStatusActionPerformed

    private void UpdatedStatusActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_UpdatedStatusActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_UpdatedStatusActionPerformed

    private void ShowAllCompActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ShowAllCompActionPerformed
        // TODO add your handling code here:
        showAllComp();
    }//GEN-LAST:event_ShowAllCompActionPerformed

    private void Update_Status_ButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Update_Status_ButtonActionPerformed
        // TODO add your handling code here:
        updateStatus();
    }//GEN-LAST:event_Update_Status_ButtonActionPerformed

    private void jButton7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton7ActionPerformed
        // TODO add your handling code here:
        gotoMainMenu();
    }//GEN-LAST:event_jButton7ActionPerformed

    private void jButton8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton8ActionPerformed
        // TODO add your handling code here:
        gotoMainMenu();
    }//GEN-LAST:event_jButton8ActionPerformed

    private void jButton9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton9ActionPerformed
        // TODO add your handling code here:
        gotoMainMenu();
    }//GEN-LAST:event_jButton9ActionPerformed

    private void Sub_RecordActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Sub_RecordActionPerformed
        // TODO add your handling code here:
        insertRecord();
    }//GEN-LAST:event_Sub_RecordActionPerformed

    private void jButton11ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton11ActionPerformed

        show_complaint_list();
    }//GEN-LAST:event_jButton11ActionPerformed

    /**
     * @param args the command line arguments
     */
    public void gotoMainMenu(){
        OpeningDisplay od = new OpeningDisplay();
        od.setVisible(true);
        this.setVisible(false);
    }
    public static boolean check_SMI(String smiString){
        int count=0;
        /*Ok, SMI(or something) given, now making sure it's a number*/
        if(!isNumeric(smiString)){
            count++;
        }
        
        /*Checking if SMI is valid or not*/
        try {
            Connection connection;
            connection = DriverManager.getConnection(
                    "jdbc:sqlserver://localhost:1433;databaseName=HSMS_Project;selectMethod=cursor", "sa", "123456");
            Statement statement = connection.createStatement();
            ResultSet resultSet = statement
                   .executeQuery("SELECT COUNT(*) as Count FROM SOCIETY_MEMBER WHERE SMI = "+smiString+" ");           
            if (resultSet.next()) {
                if(resultSet.getString("Count").equals("0")){
                    count++;
                }             
            }
            
                        
        } catch (Exception e) {
            e.printStackTrace();
        }
        if(count == 0){
            return true;
        }else{
            return false;
        }
    }
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Windows".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(complaints_Rafsan.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(complaints_Rafsan.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(complaints_Rafsan.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(complaints_Rafsan.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new complaints_Rafsan().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable AllRecords;
    private com.toedter.calendar.JDateChooser InDate;
    private javax.swing.JTextArea InDescrp;
    private javax.swing.JTextField InSmi;
    private javax.swing.JTextField InTitle;
    private com.toedter.calendar.JDateChooser SearchByDate;
    private javax.swing.JTextField SearchBySMI;
    private javax.swing.JComboBox<String> SearchByStatus;
    private javax.swing.JButton SearchForDate;
    private javax.swing.JButton SearchForSMI;
    private javax.swing.JButton SearchForStatus;
    private javax.swing.JTable SearchRecordTable;
    private javax.swing.JButton ShowAllComp;
    private javax.swing.JButton Sub_Record;
    private javax.swing.JButton Update_Status_Button;
    private javax.swing.JComboBox<String> UpdatedStatus;
    private javax.swing.JButton jButton11;
    private javax.swing.JButton jButton7;
    private javax.swing.JButton jButton8;
    private javax.swing.JButton jButton9;
    private javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JTabbedPane jTabbedPane1;
    // End of variables declaration//GEN-END:variables
}
